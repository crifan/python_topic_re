<?xml version='1.0' encoding="utf-8"?>

<!DOCTYPE chapter
[

<!ENTITY % crl_ent PUBLIC "crl.ent" 'http://www.crifan.com/files/res/docbook/entity/crl.ent'>
%crl_ent;

]>

<chapter
    xmlns="http://docbook.org/ns/docbook"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xl="http://www.w3.org/1999/xlink"
    
    xml:id="ch06_re_note_summary">
<title>Python中正则表达式的使用心得</title>
<abstract></abstract>
<para></para>
<para>此处整理一下，Python中使用正则表达式的心得：</para>
<para></para>
<para></para>

<sect1 xml:id="re_vertical_bar"><title>re模块搜索时要注意竖线"|"的使用</title>
    <para>某次，对于字符串</para>
    <programlisting language="python">footerUni=u"分类： | 标签：";</programlisting>
    <para>使用：</para>
    <programlisting language="python">
<![CDATA[
foundCatZhcn = re.search(u"分类：(?P<catName>.+)|", footerUni);
print "foundCatZhcn=",foundCatZhcn;
if(foundCatZhcn):
    print "foundCatZhcn.group(0)=",foundCatZhcn.group(0);
    print "foundCatZhcn.group(1)=",foundCatZhcn.group(1);
    catName = foundCatZhcn.group("catName");
    print "catName=",catName;
]]>
    </programlisting>
    <para>所得到的结果却是：</para>
    <screen>
<![CDATA[
foundCatZhcn= <_sre.SRE_Match object at 0x027E3C20>
foundCatZhcn.group(0)=
foundCatZhcn.group(1)= None
catName= None
]]>
    </screen>
    <para>其中group(0)，不是所期望的整个匹配的字符串，且group(1)应该是一个空格的字符，而不是None。</para>
    <para>调试了半天，最后终于找到原因了，原来是在正则搜索中，竖线"|"，是or的关系</para>
    <quote>
        <para>'|'</para>
        <para>    A|B, where A and B can be arbitrary REs, creates a regular expression that will match either A or B. An arbitrary number of REs can be separated by the '|' in this way. This can be used inside groups (see below) as well. As the target string is scanned, REs separated by '|' are tried from left to right. When one pattern completely matches, that branch is accepted. This means that once A matches, B will not be tested further, even if it would produce a longer overall match. In other words, the '|' operator is never greedy. To match a literal '|', use \|, or enclose it inside a character class, as in [|]. </para>
    </quote>
    <para>所以此处匹配到的结果是空值</para>
    <para>所以测试过程中，无论如何修改re中的表达式，也都会得到foundCatZhcn是非空的值</para>
    <para>然后对应的解决办法是，给竖线加上反斜杠，表示竖线字符本身：</para>
    <programlisting language="python"><![CDATA[foundCatZhcn = re.search(u"分类：(?P<catName>.*?)\|", footerUni);]]></programlisting>
    <para>这样才能真正自己想要的效果。</para>
</sect1>

<sect1 xml:id="re_search_group"><title>re模块的search的含义和用法及查找后group的含义</title>
    <para>参考<link xl:href="http://www.tutorialspoint.com/python/python_reg_expressions.htm">这里</link>：</para>
    <informaltable>
        <tgroup cols="2">
            <thead>
                <row><entry>Match Object Methods</entry><entry>Description</entry></row>
            </thead>
            <tbody>
                <row><entry>group(num=0)</entry><entry>This methods returns entire match (or specific subgroup num)</entry></row>
                <row><entry>groups()</entry><entry>This method return all matching subgroups in a tuple (empty if there weren’t any)</entry></row>
            </tbody>
        </tgroup>
    </informaltable>
    <para>知道了，原来group(0)，是所有匹配的内容，而group(N)指的是原先subgroup子组对应的内容，而subgroup是原先search等规则中，用括号()所括起来的。</para>
    <para>举例1：</para>
    <programlisting>
#!/usr/bin/python
import re
line = "Cats are smarter than dogs";
matchObj = re.search( r'(.*) are(\.*)', line, re.M|re.I)
if matchObj:
  print "matchObj.group() : ", matchObj.group()
  print "matchObj.group(1) : ", matchObj.group(1)
  print "matchObj.group(2) : ", matchObj.group(2)
else:
  print "No match!!"
    </programlisting>
    <para>输出是：</para>
    <screen>
matchObj.group(): Cats are
 matchObj.group(1) : Cats
 matchObj.group(2) :
    </screen>
    <para>举例2：字符串：</para>
    <programlisting>var pre = [false,'', '','\/recommend_music/blog/item/.html'];</programlisting>
    <para>然后去search：</para>
    <programlisting>match = re.search(r"var pre = \[(.*?),.*?,.*?,'(.*?)'\]", page, re.DOTALL | re.IGNORECASE | re.MULTILINE)print "match(0)=", match.group(0),"match(1)=",match.group(1),"match(2)=",match.group(2),"match(3)=",match.group(3)</programlisting>
    <para>得到的输出是：</para>
    <screen>
match(0)= var pre = [false,'', '','\/recommend_music/blog/item/.html']
match(1)= false
match(2)= \/recommend_music/blog/item/.html
match(3)=
    </screen>
</sect1>
    
<sect1 xml:id="re_findall_parentheses"><title>re模块的findall的模式（pattern）中是否加括号的区别</title>
    <para>关于search的结果，<xref linkend="re_search_group" />中已经解释过了。</para>
    <para>下面详细给出关于findall中，对于pattern中，加括号，与不加括号，所查找到的结果的区别。</para>
    <para>其中加括号，表示（）内的匹配的内容为一组，供得到结果，通过group（N）所获取的到，N从0开始。</para>
    <para>下面是详细测试结果，看结果，就明白是否加括号之间的区别了：</para>
    <programlisting>
# here blogContent contains following pic url link:
# http://hiphotos.baidu.com/againinput_tmp/pic/item/069e0d89033b5bb53d07e9b536d3d539b400bce2.jpg
# http://hiphotos.baidu.com/recommend_music/pic/item/221ebedfa1a34d224954039e.jpg
# following is test result:
pic_pattern_no_parenthesis = r'http://hiphotos.baidu.com/\S+/[ab]{0,2}pic/item/[a-zA-Z0-9]{24,40}\.\w{3}'
picList_no_parenthesis = re.findall(pic_pattern_no_parenthesis, blogContent) # findall result is a list if matched
print 'findall no()=',picList_no_parenthesis
print 'findall no() len=',len(picList_no_parenthesis)
#print 'findall no() group=',picList_no_parenthesis.group(0) # -&gt; cause error
pic_pattern_with_parenthesis = r'http://hiphotos.baidu.com/(\S+)/([ab]{0,2})pic/item/([a-zA-Z0-9]+)\.([a-zA-Z]{3})'
picList_with_parenthesis = re.findall(pic_pattern_with_parenthesis, blogContent) # findall result is a list if matched
print 'findall with()=',picList_with_parenthesis
print 'findall with() len=',len(picList_with_parenthesis)
#print 'findall with() group(0)=',picList_with_parenthesis.group(0) # -&gt; cause error
#print 'findall with() group(1)=',picList_with_parenthesis.group(1) # -&gt; cause error
print 'findall with() [0][0]=',picList_with_parenthesis[0][0]
print 'findall with() [0][1]=',picList_with_parenthesis[0][1]
print 'findall with() [0][2]=',picList_with_parenthesis[0][2]
print 'findall with() [0][3]=',picList_with_parenthesis[0][3]
#print 'findall with() [0][4]=',picList_with_parenthesis[0][4] # no [4] -&gt; cause error
    </programlisting>
    <para>测试结果为：</para>
findall no()= [u'http://hiphotos.baidu.com/againinput_tmp/pic/item/069e0d89033b5bb53d07e9b536d3d539b400bce2.jpg', u'http://hiphotos.baidu.com/recommend_music/pic/item/221ebedfa1a34d224954039e.jpg']
findall no() len= 2
findall with()= [(u'againinput_tmp', u'', u'069e0d89033b5bb53d07e9b536d3d539b400bce2', u'jpg'), (u'recommend_music', u'', u'221ebedfa1a34d224954039e', u'jpg')]
findall with() len= 2
findall with() [0][0]= againinput_tmp
findall with() [0][1]=
findall with() [0][2]= 069e0d89033b5bb53d07e9b536d3d539b400bce2
findall with() [0][3]= jpg
    <screen>
    </screen>
</sect1>

<sect1 xml:id="re_search_note"><title>使用re.search需要注意的事情</title>
    <programlisting>
pattern = re.compile(r'HTTP Error ([0-9]{3}):.*')
matched = re.search(pattern, errStr)
if matched : #注意，此处运行时候会直接出错！！！因为search查找后，应该用matched.group(0),matched.group(1)等方式查看查找出来的结果
    print 'is http type error'
    isHttpError = True
else :
    print 'not http type error'
    isHttpError = False
    </programlisting>
    <para>用re.search后，想要查看结果，如果直接用返回值matched的话，运行的时候会直接出错！！！ 因为search查找后，应该用matched.group(0),matched.group(1)等方式查看查找出来的结果。 这点，需要特别注意。</para>
    <para>【后记】</para>
    <para>后来的测试结果表明上面的判断是错误的。</para>
    <para>上面的错误实际上是由于当时search的时候所传入的参数errStr实际上是个对象类型，而不是普通的str或者unicode字符类型，所以导致上面的search会直接运行出错。</para>
    <para>而如果在search之前，用errStr = str(errStr)后，search的结果，则是可以直接拿来判断是否为空，或者用来打印的。</para>
    <para>相应的打印出来的结果，是类似这样的：</para>
    <screen>matched= &lt;_sre.SRE_Match object at 0x02B4F1E0&gt;</screen>
    <para>而对应的，matched.group(0)是对应的匹配此次查找的全部的字符：</para>
    <screen>HTTP Error 500: ( The specified network name is no longer available.  )</screen>
    <para>【总结】</para>
    <para>在调用类似于re.search等函数的时候，要确保传入的所要查找的变量，是字符类型（str或者是unicode），否则，像我这里，传入的是一个对象，而不是字符，就会导致运行出错了。</para>
</sect1>

<sect1 xml:id="python_re_open_question"><title>Python正则表达式的一些疑惑和未解决的问题</title>
    <sect2 xml:id="add_backslash_before_slash"><title>搜索内容包含斜杠时，必须加上反斜杠才可以搜索到，原因未知</title>
        <para>字符串变量respPostJson为：</para>
        <screen>,url : 'http:\/\/hi.baidu.com\/shuisidezhuyi\/item\/d32cc02e598460c50e37f967',</screen>
        <para>使用代码：</para>
        <programlisting language="python">
<![CDATA[
foundUrlList = re.findall("url\s*?:\s*?'(?P<url>http:\\/\\/hi\.baidu\.com\\/.+?\\/item\\/\w+?)'", respPostJson);
logging.info("foundUrlList=%s", foundUrlList);
]]>
        </programlisting>
        <para>却搜不到对应的字符串，结果为：</para>
        <screen>foundUrlList=[]</screen>
        <para>而只有给斜杠前面加上反斜杠：</para>
        <programlisting language="python">
<![CDATA[
foundUrlList = re.findall("url\s*?:\s*?'(?P<url>http:\\\/\\\/hi\.baidu\.com\\\/.+?\\\/item\\\/\w+?)'", respPostJson);
logging.info("foundUrlList=%s", foundUrlList);
]]>
        </programlisting>
        <para>才可以搜索到结果：</para>
        <screen>foundUrlList=['http:\\/\\/hi.baidu.com\\/shuisidezhuyi\\/item\\/d32cc02e598460c50e37f967']</screen>
        <para>很是奇怪。目前不知道为何会这样，等待高手给解释解释。</para>
    </sect2>
</sect1>

</chapter>